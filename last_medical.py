import os
import asyncio
import logging
import fitz  # PyMuPDF
import nest_asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from groq import Groq
import openai


# === CONFIGURATION ===
bot = Bot(token=os.getenv("API_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())
client = Groq(api_key=os.getenv("GROQ_API_KEY"))
openai.api_key =  os.getenv("openai_token")
# === FSM STATE ===
class CompareStates(StatesGroup):
    waiting_for_pdfs = State()

user_files = {}

# === PDF TEXT EXTRACTION ===
def extract_text_from_pdf(pdf_path):
    text = ""
    with fitz.open(pdf_path) as pdf:
        for page in pdf:
            text += page.get_text() + "\n"
    return text

# === GROQ COMPARISON ===
def compare_texts(text1, text2):
    prompt = f"""
    
    –¢—ã ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –°—Ä–∞–≤–Ω–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    
    –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ markdown  –∏  –±–µ–∑ html —Ä–∞–∑–º–µ—Ç–∫–∏. 
    –ù–ï –ü–†–û–ü–£–°–ö–ê–ô –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –æ—Ç—á–∏—Ç—ã–≤–∞–π—Å—è –ø–æ –≤—Å–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º. –ï—Å–ª–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –≤—Å–µ.
    
    –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω—ã—Ö:
                    –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞: –∏–∑ –ø–µ—Ä–≤–æ–≥–æ PDF-—Ñ–∞–π–ª–∞.  
                    

                    –î–∞—Ç–∞ –≤–∑—è—Ç–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: –¥–∞—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ PDF-—Ñ–∞–π–ª–∞. 

                    –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –∑–Ω–∞—á–µ–Ω–∏–µ (–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: )
                    –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –∑–Ω–∞—á–µ–Ω–∏–µ (–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: )
                    ... (–≤—ã–≤–µ–¥–∏ –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏) 
               
                    –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞: –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ PDF-—Ñ–∞–π–ª–∞.  

                    –î–∞—Ç–∞ –≤–∑—è—Ç–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: –¥–∞—Ç–∞ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ PDF-—Ñ–∞–π–ª–∞. 

                 
                    –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –∑–Ω–∞—á–µ–Ω–∏–µ (–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: )
                    –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –∑–Ω–∞—á–µ–Ω–∏–µ (–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: )
                    ... (–≤—ã–≤–µ–¥–∏ –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
                    –†–µ–∑—é–º–µ: —Ç–≤–æ–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ.

    –ê–Ω–∞–ª–∏–∑ 1:
    {text1}
    
    –ê–Ω–∞–ª–∏–∑ 2:
    {text2}
"""
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –≤—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

# === COMMAND START ===
@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –¥–≤–∞ PDF-—Ñ–∞–π–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ —Ñ–∞–π–ª).")
    user_files[message.from_user.id] = []
    await state.set_state(CompareStates.waiting_for_pdfs)

# === PDF RECEIVED ===
@dp.message(CompareStates.waiting_for_pdfs)
async def pdf_received(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª.")
        return

    user_id = message.from_user.id
    file = await bot.download(message.document)
    file_path = f"user_{user_id}_{len(user_files[user_id]) + 1}.pdf"
    with open(file_path, "wb") as f:
        f.write(file.read())
    user_files[user_id].append(file_path)

    if len(user_files[user_id]) < 2:
        await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ñ–¥—É –µ—â—ë –æ–¥–∏–Ω PDF.")
    else:
        await message.answer("üîç –°—Ä–∞–≤–Ω–∏–≤–∞—é –∞–Ω–∞–ª–∏–∑—ã...")

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        text1 = extract_text_from_pdf(user_files[user_id][0])
        text2 = extract_text_from_pdf(user_files[user_id][1])
        result = compare_texts(text1, text2)

        await message.answer("üìä –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤:\n\n" + result)

        # --- –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        for path in user_files[user_id]:
            os.remove(path)
        user_files[user_id] = []
        await state.clear()

if __name__ == "__main__":
    nest_asyncio.apply()
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))







